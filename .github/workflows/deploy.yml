name: Deploy

on:
  push:
    branches: [ "master" ]

jobs:
  lint-api:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js 21
        uses: actions/setup-node@v4.0.4
        with:
          node-version: 21

      - name: Install redocly
        run: npm i -g @redocly/cli@latest

      - name: Lint proxy API
        run: cd ./api && npx @redocly/cli@latest lint ./est-proxy-api.yaml --config ./config/lint.yaml

      - name: Lint back API
        run: cd ./api && npx @redocly/cli@latest lint ./est-back-api.yaml --config ./config/lint.yaml

  build-api:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare and build Api
        uses: ./.github/workflows/actions/prepare_env
        with:
          cacheTag: api-${{ hashFiles('api/') }}

  lint-cpp:
    needs: [ lint-api, build-api ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: cpp-linter/cpp-linter-action@v2
        id: linter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          style: 'file'  # Use .clang-format config file
          tidy-checks: '-*' # disable clang-tidy
          thread-comments: ${{ github.event_name == 'pull_request' && 'update' }}
          files-changed-only: false

      - name: Fail
        if: steps.linter.outputs.checks-failed > 0
        continue-on-error: false
        run: exit 1

  test-back:
    needs: [ lint-api, build-api ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare and build Api
        uses: ./.github/workflows/actions/prepare_env
        with:
          cacheTag: api-${{ hashFiles('api/') }}

      - name: Run tests in docker
        uses: docker/build-push-action@v5.3.0
        with:
          context: .
          file: ./iac/images/est-back/Dockerfile
          push: false

  build-back-image:
    needs: [ test-back, lint-cpp ]
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare and build Api
        uses: ./.github/workflows/actions/prepare_env
        with:
          cacheTag: api-${{ hashFiles('api/') }}

      - name: Build image
        uses: ./.github/workflows/actions/build_image
        with:
          image: est-back
          actor: ${{ github.actor }}
          token: ${{ secrets.GITHUB_TOKEN }}


  test-front:
    needs: [ lint-api, build-api ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare and build Api
        uses: ./.github/workflows/actions/prepare_env
        with:
          cacheTag: api-${{ hashFiles('api/') }}

      - name: Install deps
        run: cd ./est-front && npm install

      - name: Test front
        run: cd ./est-front && npm run test


  build-front-image:
    needs: [ test-front ]
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare and build Api
        uses: ./.github/workflows/actions/prepare_env
        with:
          cacheTag: api-${{ hashFiles('api/') }}

      - name: Install deps
        run: cd ./est-front && npm install

      - name: Build np-front
        run: cd ./est-front && npm run build

      - name: Build image
        uses: ./.github/workflows/actions/build_image
        with:
          image: est-front
          actor: ${{ github.actor }}
          token: ${{ secrets.GITHUB_TOKEN }}


  test-proxy:
    needs: [ lint-api, build-api ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare and build Api
        uses: ./.github/workflows/actions/prepare_env
        with:
          cacheTag: api-${{ hashFiles('api/') }}

      - name: Install deps
        run: cd ./est-proxy && go mod tidy

      - name: Test proxy
        run: cd ./est-proxy && go test -json ./...


  build-proxy-image:
    needs: [ test-proxy ]
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare and build Api
        uses: ./.github/workflows/actions/prepare_env
        with:
          cacheTag: api-${{ hashFiles('api/') }}

      - name: Install deps
        run: cd ./est-proxy && go mod tidy

      - name: Build proxy
        run: cd ./est-proxy && CGO_ENABLED=0 GOOS=linux go build -o ./build/app ./src

      - name: Build image
        uses: ./.github/workflows/actions/build_image
        with:
          image: est-proxy
          actor: ${{ github.actor }}
          token: ${{ secrets.GITHUB_TOKEN }}


  test-mono:
    needs: [ lint-api, build-api ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare and build Api
        uses: ./.github/workflows/actions/prepare_env
        with:
          cacheTag: api-${{ hashFiles('api/') }}

      - name: Install java api
        working-directory: api/build/est-mono-api
        run: mvn clean install

      - name: Build with Maven
        working-directory: ./est-mono
        run: mvn -B test -T1C --file pom.xml


  build-mono-image:
    needs: [ test-mono ]
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare and build Api
        uses: ./.github/workflows/actions/prepare_env
        with:
          cacheTag: api-${{ hashFiles('api/') }}

      - name: Install java api
        working-directory: api/build/est-mono-api
        run: mvn clean install

      - name: Build with Maven
        working-directory: ./est-mono
        run: mvn clean package

      - name: Build image
        uses: ./.github/workflows/actions/build_image
        with:
          image: est-mono
          actor: ${{ github.actor }}
          token: ${{ secrets.GITHUB_TOKEN }}


  kube-update:
    needs: [ build-back-image, build-front-image, build-proxy-image, build-mono-image ]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        app: [ est-back, est-front, est-proxy, est-mono ]

    steps:
      - name: Set the Kubernetes context
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBESECRET }}

      - name: Deploy ${{ matrix.app }}
        run: kubectl rollout restart deployment/${{ matrix.app }} -n e-sketch
